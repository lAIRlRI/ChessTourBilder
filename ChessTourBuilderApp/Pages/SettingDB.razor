@page "/setting"
@layout MainLayout
@using ChessTourBuilderApp.Data.DataBases
@using ChessTourBuilderApp.Data.HelpClasses
@inject NavigationManager NavigationManager


<body class="main-conteneer">
    <section class="left-conteneer">
        <h1 class="title" href="">Настройки</h1>
        <button @onclick="(()=>HandleSelectionChange(true))">Сервер</button>
        <button @onclick="(()=>HandleSelectionChange(false))">Локально</button>
        <div class="form">
            @if (IsServer)
            {
                <div>
                    <p class="error-text">@result[0]</p>
                    <input @bind-value="values[0]" placeholder="IP" type="text">
                </div>
                <button @onclick="@Cheker" href="">Попробовать</button>
            }
            else
            {
                <button @onclick="(()=>ChekerLite())">Создать БД локально</button>
            }

        </div>
        <p>@DBChangeText</p>
        <p>@expentionMassege</p>
    </section>
    <section>
        @if (CreateAdmin)
        {
            <div class="form">
                <div>
                    <p class="error-text">@result[0]</p>
                    <input @bind-value="adminvalues[0]" placeholder="Имя" type="text">
                </div>
                <div>
                    <p class="error-text">@result[1]</p>
                    <input @bind-value="adminvalues[1]" placeholder="Фамилия" type="text">
                </div>
                <div>
                    <p class="error-text">@result[2]</p>
                    <input @bind-value="adminvalues[2]" placeholder="User Name" type="text">
                </div>
                <div>
                    <p class="error-text">@result[3]</p>
                    <input @bind-value="adminvalues[3]" placeholder="User Password" type="text">
                </div>
            </div>
            <button @onclick="(()=>OnCreateAdmin())">Создать Админа</button>
        }
    </section>
</body>

@code {
    string[] result = new string[4], values = new string[4], adminvalues = new string[5];

    string DBChangeResult, DBChangeText, expentionMassege;

    bool ExpBD, ExpTable, CreateAdmin, IsServer;

    private void OnClickNavigate(string str) => NavigationManager.NavigateTo(str);

    private void HandleSelectionChange(bool param)
    {
        IsServer = param;
    } 

    private void OnCreateDB()
    {
        try
        {
            OnCreateTable(values[1]);
        }
        catch (Exception e)
        {
            DBChangeText = "Не удалось создать бд";
            expentionMassege = e.Message;
        }
    }

    private async void Cheker()
    {
        ExpBD = ExpTable = false;

        Array.Clear(result);

        if (!Helper.CheckDB(values, ref result)) return;

        DBChangeResult = await DataBase.NewConnection(values);

        switch (DBChangeResult)
        {
            case "ok":
                OnClickNavigate("/");
                break;
            case "NoDB":
                DBChangeText = "Не удалось подключиться к базе данных";
                ExpBD = true;
                break;
            case "NoTable":
                DBChangeText = "В бaзе отсутствуют необходимые таблицы";
                ExpTable = true;
                break;
            default:
                break;
        }
    }

    private void OnCreateTable(string str)
    {
        try
        {
            CreateAdmin = true;
        }
        catch (Exception e)
        {
            DBChangeText = "Не удалось создать таблицы";
            expentionMassege = e.Message;
        }
    }

    private void OnCreateAdmin()
    {
        try
        {
            if (!Helper.CheckDB(adminvalues, ref result)) return;


            StaticResouses.mainControler.OrganizerControler.Insert(new() 
            {
                    FirstName = adminvalues[0],
                    MiddleName = adminvalues[1],
                    Login = adminvalues[2],
                    Password = adminvalues[3]
            });

            DataBase.ConnChangeTemp($" INSERT INTO Administrator ([OrganizerID]) VALUES (1)");
            Cheker();
        }
        catch (Exception e)
        {
            DBChangeText = "Не удалось создать Админа";
            expentionMassege = e.Message;
        }
    }

    private async void ChekerLite()
    {
        DBChangeResult = await DataBase.NewConnectionLite();

        switch (DBChangeResult)
        {
            case "ok":
                OnClickNavigate("/");
                break;
            default:
                expentionMassege = DBChangeResult;
                break;
        }
    }
}