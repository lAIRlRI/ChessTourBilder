@page "/setting"
@layout MainLayout
@using ChessTourBuilderApp.Data.DataBases
@using ChessTourBuilderApp.Data.HelpClasses
@using Microsoft.Data.SqlClient;
@inject NavigationManager NavigationManager


<body class="main-conteneer">
    <section class="left-conteneer">
        <h1 class="top-row-text text text-color-right" href="">Настройки</h1>
        <div class="form">
            <div>
                <p class="text-color-right error-text">@result[0]</p>
                <input @bind-value="values[0]" placeholder="IP" type="text">
            </div>
            <div>
                <p class="text-color-right error-text">@result[1]</p>
                <input @bind-value="values[1]" placeholder="DBName" type="text">
            </div>
            <div>
                <p class="text-color-right error-text">@result[2]</p>
                <input @bind-value="values[2]" placeholder="User Name" type="text">
            </div>
            <div>
                <p class="text-color-right error-text">@result[3]</p>
                <input @bind-value="values[3]" placeholder="User Password" type="text">
            </div>
        </div>
        <p>@DBChangeText</p>
        <p>@expentionMassege</p>
        <button @onclick="(()=>OnCreateDB())">Создать БД</button>
        @if (ExpTable)
        {
            <button @onclick="(()=>OnCreateTable(values[1]))">Создать Таблицы</button>
        }
        <button class="text text-color-right border-none" @onclick="@Cheker" href="">Попробовать</button>

        <button @onclick="(()=>ChekerLite())">Создать БД локально</button>
    </section>
    <section>
        @if (CreateAdmin)
        {
            <div class="form">
                <div>
                <p class="text-color-right error-text">@result[0]</p>
                    <input @bind-value="adminvalues[0]" placeholder="Имя" type="text">
                </div>
                <div>
                    <p class="text-color-right error-text">@result[1]</p>
                    <input @bind-value="adminvalues[1]" placeholder="Фамилия" type="text">
                </div>
                <div>
                    <p class="text-color-right error-text">@result[2]</p>
                    <input @bind-value="adminvalues[2]" placeholder="User Name" type="text">
                </div>
                <div>
                    <p class="text-color-right error-text">@result[3]</p>
                    <input @bind-value="adminvalues[3]" placeholder="User Password" type="text">
                </div>
            </div>
            <button @onclick="(()=>OnCreateAdmin(values[1]))">Создать Админа</button>
        }
    </section>
</body>

@code {
    string[] result = new string[4], values = new string[4], adminvalues = new string[5];

    string DBChangeResult, DBChangeText, expentionMassege;

    bool ExpBD, ExpTable, CreateAdmin;

    private void OnClickNavigate(string str) => NavigationManager.NavigateTo(str);

    private void OnCreateDB()
    {
        DBChangeText = "Ждите, создвём бд \n";
        try
        {
            string str = $"create database {values[1]} ";
            DataBase.connection = new SqlConnection($"Data Source = {values[0]}; " +
                          $"Initial Catalog = master; " +
                          $"User ID = {values[2]};" +
                          $"Password = {values[3]};" +
                          $"Trusted_Connection = true;" +
                          $"TrustServerCertificate = true;" +
                          $"Encrypt = false;" +
                          $"Integrated Security = true;");
            DataBase.ConnChangeTemp(str);
            OnCreateTable(values[1]);
        }
        catch (Exception e)
        {
            DBChangeText = "Не удалось создать бд";
            expentionMassege = e.Message;
        }
    }

    private void Cheker()
    {
        ExpBD = ExpTable = false;

        Array.Clear(result);

        if (!Helper.CheckDB(values, ref result)) return;

        DBChangeResult = DataBase.NewConnection(values);

        switch (DBChangeResult)
        {
            case "ok":
                OnClickNavigate("/");
                break;
            case "NoDB":
                DBChangeText = "Не удалось подключиться к базе данных";
                ExpBD = true;
                break;
            case "NoTable":
                DBChangeText = "В бaзе отсутствуют необходимые таблицы";
                ExpTable = true;
                break;
            default:
                break;
        }
    }

    private void OnCreateTable(string str)
    {
        try
        {
            DataBase.ConnChangeTemp($"use {str} " + DataBase.GetTables());
            CreateAdmin = true;
            DBChangeText += "\nЖдите, создвнны таблицы\n";
        }
        catch (Exception e)
        {
            DBChangeText = "Не удалось создать таблицы";
            expentionMassege = e.Message;
        }
    }

    private void OnCreateAdmin(string str)
    {
        try
        {
            if (!Helper.CheckDB(adminvalues, ref result)) return;
            DataBase.ConnChangeTemp($" use {str}; INSERT INTO Organizer (" +
                                                                "FirstName," +
                                                                "MiddleName," +
                                                                "Login," +
                                                                "Password)" +
                                                          "VALUES(" +
                                                                $"'{adminvalues[0]}'," +
                                                                $"'{adminvalues[1]}'," +
                                                                $"'{adminvalues[2]}'," +
                                                                $"'{adminvalues[3]}')");
            DataBase.ConnChangeTemp($" use {str}; INSERT INTO Administrator ([OrganizerID]) VALUES (1)");
            Cheker();
        }
        catch (Exception e)
        {
            DBChangeText = "Не удалось создать Админа";
            expentionMassege = e.Message;
        }
    }

    private void ChekerLite()
    {
        DBChangeResult = DataBase.NewConnectionLite();

        switch (DBChangeResult)
        {
            case "ok":
                OnClickNavigate("/");
                break;
            default:
                expentionMassege = DBChangeResult;
                break;
        }
    }
}