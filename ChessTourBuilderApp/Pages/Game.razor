@page "/game"
@layout MainLayout
@using ChessTourBuilderApp.Data.HelpClasses
@inject NavigationManager NavigationManager

<body class="main-conteneer">
    <div class="top-row-conteneer">
        <div class="nav-item">
            <button class="icon" @onclick="@(()=>OnClickNavigation("/navMenu"))"></button>
            <button @onclick="@(()=>OnClickNavigation("/tour"))">Назад</button>
        </div>
        <h1 class="title" href="">@(Data.HelpClasses.Helper.FI())</h1>
    </div>
    <div class="form">
        <div>
            <p class="error-text"></p>
            <p class="sub-title-input">Белыми</p>
            <input @bind-value="whiteP" disabled="@update" />
        </div>
        <div>
            <p class="error-text"></p>
            <p class="sub-title-input">Черными</p>
            <input @bind-value="blackP" disabled="@update" />
        </div>
        <div>
            <p class="error-text"></p>
            <p class="sub-title-input">Время</p>
            <input @bind-value="@StaticResouses.mainControler.ConsignmentControler.nowConsignment.DateStart" type="datetime-local" disabled="@update" />
        </div>
         <div>
            <p class="error-text"></p>
            <p class="sub-title-input">Результат</p>
            <input @bind-value="@result" disabled />
        </div>
        <div>
            <p class="error-text"></p>
            <p class="sub-title-input">Стутус</p>
            <input @bind-value="@Helper.status[StaticResouses.mainControler.ConsignmentControler.nowConsignment.StatusID-1]" disabled />
        </div>
    </div>
    <section class="pozition-conteneer">
        <div class="element">
            <h3 class="text">@StaticResouses.mainControler.ConsignmentControler.nowConsignment.GameMove</h3>
        </div>
    </section>
    @if (StaticResouses.mainControler.ConsignmentControler.nowConsignment.StatusID == 3 && StaticResouses.mainControler.EventControler.nowEvent.StatusID != 1 && !StaticResouses.IsPlayer)
    {
        <button @onclick="@(()=>OnClickNavigation("/gameMove"))">Смотреть</button>
    }

    @if (StaticResouses.mainControler.ConsignmentControler.nowConsignment.StatusID != 1)
    {
        @if (check)
        {
            <button @onclick="@(()=>OnClickNavigation("/gameMove"))">Играть</button>
        }
        else if (StaticResouses.mainControler.OrganizerControler.nowOrganizer.OrganizerID == StaticResouses.mainControler.EventControler.nowEvent.OrganizerID)
        {
            <button @onclick="@(()=>OnClickNavigation("/gameMove"))">Играть локально</button>
        }
    }
</body>

@code {
    bool check = OnCheck();
    bool update = true;

    string result = $"{StaticResouses.mainControler.ConsignmentControler.nowConsignment.whitePlayer.Result} : {StaticResouses.mainControler.ConsignmentControler.nowConsignment.blackPlayer.Result}";
    string blackP = StaticResouses.mainControler.ConsignmentControler.nowConsignment.blackPlayer.player.FirstName + " " + StaticResouses.mainControler.ConsignmentControler.nowConsignment.blackPlayer.player.MiddleName;
    string whiteP = StaticResouses.mainControler.ConsignmentControler.nowConsignment.whitePlayer.player.FirstName + " " + StaticResouses.mainControler.ConsignmentControler.nowConsignment.whitePlayer.player.MiddleName;

    private void OnClickNavigation(string str) => NavigationManager.NavigateTo(str);

    private static bool OnCheck()
    {
        if (StaticResouses.IsPlayer)
        {
            if (StaticResouses.mainControler.ConsignmentControler.nowConsignment.blackPlayer.PlayerID == (int)StaticResouses.mainControler.PlayerControler.nowPlayer.FIDEID) return true;
            if (StaticResouses.mainControler.ConsignmentControler.nowConsignment.whitePlayer.PlayerID == (int)StaticResouses.mainControler.PlayerControler.nowPlayer.FIDEID) return true;
        }
        return false;
    }
}