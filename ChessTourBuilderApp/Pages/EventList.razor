@page "/eventList"
@using ChessTourBuilderApp.Data.HelpClasses
@using Data.Model
@using Data.Controler
@using System.Text.RegularExpressions
@layout Shared.MainLayout
@inject NavigationManager NavigationManager


<body class="main-conteneer">
    <div class="top-row-conteneer">
        <button @onclick="@(()=>OnClickNavigate("/navMenu"))" class="icon"></button>
        <h1 class="title">@(Data.HelpClasses.Helper.FI())</h1>
    </div>
    <section class="main-conteneer-block">
        <input @bind-value="like" class="input-main" placeholder="Поиск" type="text">
    </section>
    <div class="top-row-conteneer">
        <h1 class="title">Турниры</h1>
        @if (!StaticResouses.IsPlayer)
        {
            <button @onclick="AddClick">@addstr</button>
        }
    </div>
    <section class="pozition-conteneer">
        @if (add)
        {
            <div class="element add-element">
                <div>
                    <p class="error-text">@result[0]</p>
                    <p class="sub-title-input">Название турнира</p>
                    <input @bind-value="eventModel.Name" />
                </div>
                <div>
                    <p class="error-text">@result[1]</p>
                    <p class="sub-title-input">Призовой фонд</p>
                    <input @bind-value="eventModel.PrizeFund" type="number" />
                </div>
                <div>
                    <p class="error-text">@result[2]</p>
                    <p class="sub-title-input">Дата начала</p>
                    <input @bind-value="eventModel.DataStart" type="datetime-local" />
                </div>
                <div>
                    <p class="error-text">@result[3]</p>
                    <p class="sub-title-input">Дата окончания</p>
                    <input @bind-value="eventModel.DataFinish" type="datetime-local" />
                </div>
                <div>
                    <p class="error-text">@result[4]</p>
                    <p class="sub-title-input">Место проведения</p>
                    <input @bind-value="eventModel.LocationEvent" />
                </div>
                <div class="div-checkbox">
                    <p>Публичный</p>
                    <input @bind-value="eventModel.IsPublic" type="checkbox" class="text" />
                </div>
                <div class="div-checkbox">
                    <p>Круговой</p>
                    <input @bind-value="eventModel.TypeEvent" type="checkbox" class="text" />
                </div>
                <button disabled="@doit" @onclick="Add">Добавить</button>
            </div>
        }

        @foreach (var item in eventModels.Where(p => Regex.IsMatch(p.Name, like + @"(\w*)", RegexOptions.IgnoreCase)))
        {
            <div class="element" @onclick="@(()=>OnClickNavigateEvent(item))">
                <div class="text">Название турнира: @item.Name</div>
                <div class="text">Дата проведения: @item.DataStart-@item.DataFinish</div>
                <div class="text">Место проведения: @item.LocationEvent</div>
                <div class="text">Призовой фонд: @item.PrizeFund р.</div>
                <div class="text">Cтвтус: @Helper.status[item.StatusID-1]</div>
            </div>
        }
    </section>
</body>

@code {
    List<Data.Model.Event> eventModels = new();
    string like = "", addstr = "Добавить";
    bool add = false, doit = false;
    string[] result = new string[5];
    Data.Model.Event eventModel = new();

    protected override async Task OnInitializedAsync() => await Inizaliz();

    private async Task Inizaliz()
    {
        await StaticResouses.mainControler.EventControler.UpdateStatus();
        if (StaticResouses.IsPlayer)
        {
            eventModels = await StaticResouses.mainControler.EventControler.GetPlayerEvent();
        }
        else eventModels = StaticResouses.mainControler.OrganizerControler.nowOrganizer.Administrator == -1 ?
                                                        await StaticResouses.mainControler.EventControler.GetPublic()
                                                    :
                                                        await StaticResouses.mainControler.EventControler.GetAll();
        if (eventModels == null) eventModels = new List<Event>();
    }

    private void OnClickNavigate(string str) => NavigationManager.NavigateTo(str);

    private async void Add()
    {
        doit = true;
        Array.Clear(result);
        result = Data.HelpClasses.Helper.CheckEvent(eventModel);

        if (!Data.HelpClasses.Helper.CheckStringArray(result))
        {
            StateHasChanged();
            return;
        }

        eventModel.OrganizerID = StaticResouses.mainControler.OrganizerControler.nowOrganizer.OrganizerID;
        eventModel.StatusID = 1;

        if (await StaticResouses.mainControler.EventControler.Insert(eventModel))
        {
            add = false;
            await StaticResouses.mainControler.EventControler.UpdateStatus();
            OnClickNavigateEvent(await StaticResouses.mainControler.EventControler.GetLast());
        }
        doit = false;
        StateHasChanged();
    }

    private void AddClick()
    {
        add = !add;
        addstr = add ? "Закрыть" : "Добавить";
    }

    private void OnClickNavigateEvent(Event ev)
    {
        StaticResouses.mainControler.EventControler.nowEvent = ev;
        NavigationManager.NavigateTo("/eventPage");
    }
}