@page "/tour"
@layout MainLayout
@using ChessTourBuilderApp.Data.HelpClasses
@inject NavigationManager NavigationManager

<body class="main-conteneer">
    <div class="top-row-conteneer">
        <div class="nav-item">
            <button class="icon" @onclick="@(()=>OnClickNavigate("/navMenu"))"></button>
            <button @onclick="@(()=>OnClickNavigate("/tourList"))">Назад</button>
        </div>
        <h1 class="top-row-text text"> @(Helper.FI())</h1>
    </div>
    <section class="main-conteneer-block">
        <input class="input-main" placeholder="Поиск" type="text">
    </section>
    <div class="top-row-conteneer">
        <h1 class="title">Партии</h1>
        @if (Helper.CheckDeleteButton() && StaticResouses.mainControler.EventControler.nowEvent.StatusID != 1 && !StaticResouses.IsPlayer)
        {
            <button @onclick="OnDelete">Удалить</button>
            <button @onclick="AddClick">@addstr</button>
            <button @onclick="OnUpdate">Изменить</button>
        }
        <input class="title-text" @bind-value="resultTour" disabled="@update"/>
    </div>
    @if (add)
    {
        <div class="element">
            <div>
                <p>@result[0]</p>
                <p>Дата начала</p>
                <input @bind-value="model.DateStart" type="datetime-local"/>
            </div>
            <div>
                <p>@result[1]</p>
                <p>Белыми</p>
                <select @bind="@model.whitePlayer.PlayerID">
                    <option value="0">Белыми</option>
                    @foreach (var item in list)
                    {
                        <option value="@item.FIDEID">@item.FirstName @item.MiddleName @item.ELORating</option>
                    }
                </select>
                <p>@result[2]</p>
                <p>Черными</p>
                <select @bind="@model.blackPlayer.PlayerID">
                    <option value="0">Черными</option>
                    @foreach (var item in list)
                    {
                        <option value="@item.FIDEID">@item.FirstName @item.MiddleName @item.ELORating</option>
                    }
                </select>
            </div>
            <button @onclick="Add">Добавить</button>
        </div>
    }
    <section class="pozition-conteneer">
        @foreach (var item in models)
        {
            <div @onclick="@(() => OnClickNavigateEvent(item))" class="element">
                <div class="text">Белыми: @item.whitePlayer.player.FirstName</div>
                <div class="text">Черными: @item.blackPlayer.player.FirstName</div>
                <div class="text">Время: @item.DateStart</div>
                <div class="text">Результат: @item.whitePlayer.Result @item.blackPlayer.Result</div>
            </div>
        }
    </section>
</body>

@code {
    List<Data.Model.Consignment> models = new();
    string addstr = "Добавить", resultTour = StaticResouses.mainControler.TourControler.nowTour.NameTour;
    string[] result = new string[3];
    Data.Model.Consignment model = new() { whitePlayer = new(), blackPlayer = new() };
    bool update = true;
    bool add = false;
    List<Data.Model.Player> list = new();

    protected override async Task OnInitializedAsync() => await Inizaliz();

    private async Task Inizaliz()
    {
        models = await StaticResouses.mainControler.ConsignmentControler.GetByTourId(StaticResouses.mainControler.TourControler.nowTour.TourID);
        list = await StaticResouses.mainControler.PlayerControler.GetByEventId(StaticResouses.mainControler.EventControler.nowEvent.EventID);
    }

    private void OnUpdate() => update = !update;
    private void OnClickNavigate(string str) => NavigationManager.NavigateTo(str);

    private async void Add()
    {
        Array.Clear(result);

        if (!Helper.CheckConsignment(model, ref result))
        {
            StateHasChanged();
            return;
        } 

        model.StatusID = 2;
        model.TourID = StaticResouses.mainControler.TourControler.nowTour.TourID;

        if (await StaticResouses.mainControler.ConsignmentControler.Insert(model))
        {
            model = await StaticResouses.mainControler.ConsignmentControler.GetLast();
            OnClickNavigateEvent(model);
        }

        StateHasChanged();
    }

    private void AddClick()
    {
        add = !add;
        addstr = add ? "Закрыть" : "Добавить";
    }

    private async void OnUpdateButton()
    {
        if (string.IsNullOrWhiteSpace(resultTour)) resultTour = StaticResouses.mainControler.TourControler.nowTour.NameTour;
        StaticResouses.mainControler.TourControler.nowTour.NameTour = resultTour;
        if (!await StaticResouses.mainControler.TourControler.Update(StaticResouses.mainControler.TourControler.nowTour, StaticResouses.mainControler.TourControler.nowTour.TourID))
        {
            StateHasChanged();
            return;
        } 
        update = false;
        StateHasChanged();
    }

    private void OnClickNavigateEvent(Data.Model.Consignment ev)
    {
        StaticResouses.mainControler.ConsignmentControler.nowConsignment = ev;
        NavigationManager.NavigateTo("/game");
    }

    private async void OnDelete()
    {
        await StaticResouses.mainControler.TourControler.Delete(StaticResouses.mainControler.TourControler.nowTour.TourID);
        OnClickNavigate("/tourList");
    }
}