@page "/eventPage"
@layout MainLayout
@using ChessTourBuilderApp.Data.HelpClasses
@using Data.Controler
@inject NavigationManager NavigationManager


<body class="main-conteneer">
    <div class="top-row-conteneer">
        <div class="nav-item">
            <button class="icon" @onclick="@(()=>OnClickNavigation("/navMenu"))"></button>
            <button class="top-row-text text" @onclick="@(()=>OnClickNavigation("/eventList"))">Назад</button>
        </div>
        <h1 class="top-row-text text" href="">@(Helper.FI())</h1>
    </div>
    <div class="top-row-conteneer">
        <div class="nav-item">
            <button @onclick="@(()=>OnClickNavigation("/playerPositionList"))" class="top-row-text text">Результаты</button>
            <button @onclick="@(()=>OnClickNavigation("/tourList"))" class="top-row-text text">Туры</button>
            @if (Helper.CheckDeleteButton() && EventControler.nowEvent.StatusID != 1 && !StaticResouses.IsPlayer)
            {
                <button class="top-row-text text" @onclick="OnDelete">Удалить</button>
                <button class="top-row-text text" @onclick="OnUpdate">Изменить</button>
            }
        </div>
        <div>
            <p class="error-text">@result[0]</p>
            <input class="top-row-text text" disabled="@update" @bind-value="eventModelupdate.Name"/>
        </div>
    </div>
    <div class="info-conteneer">
        <section class="image-conteneer info-item1">
            <div class="image"></div>
        </section>
        <section class="info-item2">
            <div>
                <p class="error-text">@result[1]</p>
                <p class="error-text">Призовой фонд</p>
                <input @bind-value="eventModelupdate.PrizeFund" type="number" disabled="@update" />
            </div>
            <div>
                <p class="error-text">@result[4]</p>
                <p class="error-text">Место</p>
                <input @bind-value="eventModelupdate.LocationEvent" disabled="@update" />
            </div>
            <div>
                <p class="error-text">@result[2]</p>
                <p class="error-text">Начало</p>
                <input @bind-value="eventModelupdate.DataStart" type="datetime" disabled="@update" />
            </div>
            <div>
                <p class="error-text">@result[3]</p>
                <p class="error-text">Окончание</p>
                <input @bind-value="eventModelupdate.DataFinish" type="datetime" disabled="@update" />
            </div>
            <input placeholder="Стутус: @Helper.status[EventControler.nowEvent.StatusID-1]" disabled />
        </section>
    </div>
    <div style="display:flex;">
        @if (!update)
        {
            <div style="display:flex;">
                <p>Публичный</p>
                <input @bind-value="@EventControler.nowEvent.IsPublic" type="checkbox" />
            </div>
            <button class="top-row-text text" @onclick="OnUpdateButton">Сохранить</button>
        }
    </div>
    @if (addPlayer)
    {
        <button class="top-row-text text" @onclick="OnAdd">Добавить игрока</button>
        @if (add)
        {
            <div class="element">
                <div>
                    <p>@result[1]</p>
                    <select @bind="FIDEID" placeholder="Белыми">
                        @foreach (var item in listPlayer)
                        {
                            <option value="@item.FIDEID">@item.FirstName @item.MiddleName @item.ELORating</option>
                        }
                    </select>
                </div>
                <button disabled="@doit" @onclick="Add">Добавить</button>
            </div>
        }
    }
    <section class="pozition-conteneer">
        @foreach (var item in list)
        {
            <div class="element">
                <div class="image-player"></div>
                <h4 class="text">@(item.FirstName + " " + item.MiddleName)</h4>
            </div>
        }
    </section>
</body>

@code {

    Data.Model.Event eventModelupdate = EventControler.nowEvent;
    bool update = true, add, addPlayer = !StaticResouses.IsPlayer && EventControler.nowEvent.StatusID != 1 && Helper.CheckDeleteButton();
    bool doit = false;
    string[] result = new string[5];
    int FIDEID;
    List<Data.Model.Player> list = new();
    List<Data.Model.Player> listPlayer = new();

    protected override async Task OnInitializedAsync()
    {
        list = await PlayerControler.GetByEventId(EventControler.nowEvent.EventID);
        listPlayer = await PlayerControler.GetAll();
    }

    private void OnUpdate() => update = !update;

    private void OnClickNavigation(string str)
    {
        if ("/tourList" == str)
        {
            if (list.Count < 2) return;
        }
        NavigationManager.NavigateTo(str);
    }

    private void OnAdd() 
    {
        add = !add; 
    }

    private async void Add()
    {
        doit = true;
        if (FIDEID == 0)
        {
            doit = false;
            return;
        } 
        if (list.FirstOrDefault(p => p.FIDEID == FIDEID) != default(Data.Model.Player))
        {
            doit = false;
            return;
        }
        await EventPlayerControler.Insert(new Data.Model.EventPlayer() { PlayerID = FIDEID, EventID = EventControler.nowEvent.EventID });
        list = await PlayerControler.GetByEventId(EventControler.nowEvent.EventID);
        doit = false;
        StateHasChanged();
    }

    private async void OnUpdateButton()
    {
        if (eventModelupdate.Name == null) eventModelupdate.Name = EventControler.nowEvent.Name;
        if (eventModelupdate.LocationEvent == null) eventModelupdate.LocationEvent = EventControler.nowEvent.LocationEvent;
        if (eventModelupdate.DataStart == null) eventModelupdate.DataStart = EventControler.nowEvent.DataStart;
        if (eventModelupdate.DataFinish == null) eventModelupdate.DataFinish = EventControler.nowEvent.DataFinish;
        if (eventModelupdate.PrizeFund == null) eventModelupdate.PrizeFund = EventControler.nowEvent.PrizeFund;

        Array.Clear(result);
        result = Helper.CheckEvent(eventModelupdate);

        if (!Helper.CheckStringArray(result)) 
        {
            StateHasChanged();
            return;
        } 
        if (!await EventControler.Update(eventModelupdate, EventControler.nowEvent.EventID))
        {
            StateHasChanged();
            return;
        }

        update = false;
        EventControler.nowEvent = eventModelupdate;
        EventControler ev = new();
        eventModelupdate = new();
        StateHasChanged();
    }

    private async void OnDelete()
    {
        if (!await EventControler.Delete(EventControler.nowEvent.EventID)) return;
        EventControler ev = new();
        OnClickNavigation("/eventList");
    }
}