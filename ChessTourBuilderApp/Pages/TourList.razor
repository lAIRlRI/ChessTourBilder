@page "/tourList"
@layout MainLayout
@using ChessTourBuilderApp.Data.HelpClasses
@using Data.Controler
@using System.Text.RegularExpressions
@inject NavigationManager NavigationManager


<body class="main-conteneer">
    <div class="top-row-conteneer">
        <div class="nav-item">
            <button class="icon" @onclick="@(()=>OnClickNavigate("/navMenu"))"></button>
            <button class="top-row-text text" @onclick="@(()=>OnClickNavigate("/eventPage"))">Назад</button>
        </div>
        <h1 class="top-row-text text">@(Data.HelpClasses.Helper.FI())</h1>
    </div>
    <div class="top-row-conteneer">
        <h1 class="top-row-text text">@(EventControler.nowEvent.Name)</h1>
        @if (Helper.CheckDeleteButton() && EventControler.nowEvent.StatusID != 1 && !StaticResouses.IsPlayer)
        {
            <h1 class="top-row-text text" @onclick="AddClick">Добавить</h1>
        }

    </div>
    @if (add)
    {
        <div class="element">
            <div>
                <p>@result</p>
                <input @bind-value="model.NameTour" placeholder="Название тура" />
            </div>
            <button @onclick="Add">Добавить</button>
        </div>
    }
    <section class="main-conteneer-block">
        <input @bind-value="like" class="input-main" placeholder="Поиск" type="text">
    </section>
    <h1 class="title-text">Туры</h1>
    <section class="pozition-conteneer">
        @foreach (var item in models.Where(p => Regex.IsMatch(p.NameTour, like + @"(\w*)", RegexOptions.IgnoreCase)))
        {
            <div @onclick="@(()=>OnClickNavigateEvent(item))" class="element">
                <div class="image image-text">@item.NameTour</div>
            </div>
        }
    </section>
</body>

@code {
    List<Data.Model.Tour> models = TourControler.Get().Where(p => p.EventID == EventControler.nowEvent.EventID).ToList();
    static string like = "", addstr = "Добавить";
    bool add;
    string result = "";
    Data.Model.Tour model = new();

    protected override void OnInitialized()
    {
        base.OnInitialized();
        add = false;
        addstr = "Добавить";
    }

    private void OnClickNavigate(string str) => NavigationManager.NavigateTo(str);

    private void Add()
    {
        result = "";
        if (string.IsNullOrWhiteSpace(model.NameTour))
        {
            result = "Поле не должно быть пустым";
            return;
        }
        model.EventID = EventControler.nowEvent.EventID;
        if (TourControler.Insert(model))
        {
            model = TourControler.GetLast();
            OnClickNavigateEvent(model);
        }
    }

    private void AddClick()
    {
        add = !add;
        addstr = add ? "Закрыть" : "Добавить";
    }

    private void OnClickNavigateEvent(Data.Model.Tour ev)
    {
        TourControler.nowTour = ev;
        NavigationManager.NavigateTo("/tour");
    }
}