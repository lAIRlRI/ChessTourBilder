@page "/gameMove"
@using ChessTourBuilderApp.Data.DataBases
@using ChessTourBuilderApp.Data.HelpClasses
@using Data.ChessClasses
@layout MainLayout
@inject NavigationManager NavigationManager

<section class="main-conteneer">
    <p class="top-row-text text">@str</p>
    <div style="display: flex; flex-wrap: wrap;">
        @if (rpt)
        {
            <div>
                <select @bind="newFigure">
                    <option selected value="">Выберете фигуру</option>
                    <option value="Q">Ферзь</option>
                    <option value="N">Конь</option>
                    <option value="B">Слон</option>
                    <option value="R">Ладья</option>
                </select>
            </div>
        }
    </div>
    @if (chessGame.IsGameContinues && StaticResouses.IsPlayer)
    {
        <div>
            <button @onclick="SetMove" disabled="@pressed" class="text">Сделать ход</button>
            <button @onclick="DeleteMove" disabled="@pressed" class="text">Удалить ход</button>
            <button @onclick="Surrender" class="text">Сдаться</button>
        </div>
        @if (End)
        {
            <select @bind="result">
                <option value="">Выберете результат</option>
                <option value="1">Белые</option>
                <option value="0">Чёрные</option>
                <option value="2">Ничья</option>
            </select>
            <button @onclick="EndGame" class="text">Подвердить</button>
        }
    }
    else
    {
        <div>Белые @StaticResouses.mainControler.ConsignmentControler.nowConsignment.whitePlayer.Result : @StaticResouses.mainControler.ConsignmentControler.nowConsignment.blackPlayer.Result Чёрные</div>
        <button @onclick="Exit" class="text">Выйти</button>
    }
    <section>
        @for (var i = 8; i > 0; i--)
        {
            <div style="display: flex;">
                @for (int j = 1; j < 9; j++)
                {
                    int currentI = i;
                    int currentJ = j;
                    <div @onclick="(()=> OnCkickTable(currentI, currentJ))" style="width: 40px; height: 40px; background-color:burlywood; border: 2px solid @CheckFigureColor(i,j)">
                        @if (CheckFigure(i, j) != default(Figure))
                        {
                            <p style="color: @ColorFigure(figureView.IsWhile)">@figureView.Name@figureView.Pozition.cell</p>
                        }
                    </div>
                }
            </div>
        }
    </section>
    <div>
        @foreach (var item in chessGame.Move)
        {
            @(item + "; ")
        }
    </div>
</section>

@code {
    List<Cell> cells = new();
    ChessGame chessGame = new(StaticResouses.mainControler.ConsignmentControler.nowConsignment);
    bool IsWhile = true, End = false, del = false, rpt = false, dis = false, firstClick = true, pressed = false;
    string move, str = "Белые", stage = "ok", newFigure, ColorfirstClick, ColorSecondClick;
    double? result;
    Figure figure = new Pawn("A8", true, -1);
    Figure figureView;
    Figure firstClickFigure;

    private void Swap() => str = IsWhile ? "Белые" : "Чёрные";
    private void SwapEnd() => End = !End;

    protected async override Task OnInitializedAsync()
    {
        chessGame = new(StaticResouses.mainControler.ConsignmentControler.nowConsignment);
        await chessGame.InizializeGame();
        StateHasChanged();
    }

    private string ColorFigure(bool IsWhile)
    {
        if (IsWhile) return "white";
        return "black";
    }

    private Figure CheckFigure(int i, int j)
    {
        if(chessGame.Figures == null) return default(Figure);
        figureView = chessGame.Figures.FirstOrDefault(p => p.Pozition.X == j && p.Pozition.Y == i && p.InGame == true);
        return figureView;
    }

    private string CheckFigureColor(int i, int j)
    {
        if (i.ToString() + j == ColorfirstClick) return "red";
        else if (i.ToString() + j == ColorSecondClick) return "green";
        return "black";
    }

    private void OnCkickTable(int i, int j)
    {
        if (firstClick)
        {
            firstClickFigure = chessGame.Figures.FirstOrDefault(p => p.Pozition.X == j && p.Pozition.Y == i && p.InGame == true);
            if (firstClickFigure != null) 
            {
                if (firstClickFigure.IsWhile != IsWhile) firstClickFigure = null;
            } 
            firstClick = false;
            ColorfirstClick = i.ToString() + j;
            ColorSecondClick = "";
        }
        else
        {
            move = (new Cell(j, i)).cell;
            firstClick = true;
            ColorSecondClick = i.ToString() + j;
        }

    }

    private async void DeleteMove()
    {
        if (!del) return;
        IsWhile = !IsWhile;
        Swap();
        del = false;
        await chessGame.DeleteLastMove(IsWhile);
        StateHasChanged();
    }

    private async Task<bool> SwitchStageGet()
    {
        switch (stage)
        {
            case "ok":
                return true;
            case "rpt":
                if (newFigure == null) return false;
                await chessGame.InsertFigure(move, newFigure, IsWhile);
                dis = false;
                rpt = false;
                stage = "ok";
                StateHasChanged();
                return false;
            case "end":
                if (IsWhile) chessGame.EndGame(1);
                else chessGame.EndGame(0);
                StateHasChanged();
                return false;
            default:
                return false;
        }
    }

    private void SwitchStageSet()
    {
        switch (stage)
        {
            case "ok":
                IsWhile = !IsWhile;
                del = true;
                move = null;
                Swap();
                break;
            case "no":
                stage = "ok";
                break;
            case "rpt":
                dis = true;
                rpt = true;
                break;
            default:
                break;
        }
    }

    private async void SetMove()
    {
        pressed = true;
        if (move == null)
        {
            pressed = false;
            return;
        }
        if (firstClickFigure == null)  {
            pressed = false;
            return;
        } 
        if (await SwitchStageGet())
            stage = await chessGame.SetFigure(firstClickFigure, move);

        pressed = false;
        await chessGame.GetFigures();
        SwitchStageSet();

        ColorfirstClick = "";
        ColorSecondClick = "";
        StateHasChanged();
    }

    private void RPT()
    {
        dis = true;
        rpt = true;
    }

    private void EndGame()
    {
        if (result == null) return;
        chessGame.EndGame(result);
        StateHasChanged();
    }

    private void Exit()
    {
        DataBase.CloseCon();
        NavigationManager.NavigateTo("/game");
    }

    private void Surrender()
    {
        if (IsWhile) chessGame.EndGame(0);
        else chessGame.EndGame(1);
        StateHasChanged();
    }
}