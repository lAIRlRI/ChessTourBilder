@page "/player"
@layout MainLayout
@using ChessTourBuilderApp.Data.DataBases
@using ChessTourBuilderApp.Data.HelpClasses
@inject NavigationManager NavigationManager


<body class="main-conteneer">
    <div class="top-row-conteneer">
        <div class="nav-item">
            <button class="icon" @onclick="@(()=>OnClickNavigation("/navMenu"))"></button>
            <button class="top-row-text text" @onclick="@(()=>OnClickNavigation("/playerList"))">Назад</button>
        </div>
        <h1 class="top-row-text text">@(Helper.FI())</h1>
    </div>
    <div class="nav-item">
        @if (StaticResouses.mainControler.OrganizerControler.nowOrganizer.Administrator != -1)
        {
            <button class="top-row-text text" @onclick="OnDelete">Удалить</button>
            <button class="top-row-text text" @onclick="OnUpdate">Изменить</button>
        }
    </div>
    <div class="info-conteneer">
        <section class="image-conteneer info-item1">
            <div class="image"></div>
        </section>
        <section class="info-item2">
            <div>
                <p class="error-text">@result[0]</p>
                <p class="error-text">FIDEID</p>
                <input @bind-value="playerModel.FIDEID" type="number" disabled="@update" />
            </div>
            <div>
                <p class="error-text">@result[1]</p>
                <p class="error-text">Имя</p>
                <input @bind-value="playerModel.FirstName" disabled="@update" />
            </div>
            <div>
                <p class="error-text">@result[2]</p>
                <p class="error-text">Фамилия</p>
                <input @bind-value="playerModel.MiddleName" disabled="@update" />
            </div>
            <div>
                <p class="error-text">@result[3]</p>
                <p class="error-text">Отчество</p>
                <input @bind-value="playerModel.LastName" disabled="@update" />
            </div>
            <div>
                <p class="error-text">@result[4]</p>
                <p class="error-text">День рождения</p>
                <input @bind-value="playerModel.Birthday" type="date" disabled="@update" />
            </div>
            <div>
                <p class="error-text">@result[5]</p>
                <p class="error-text">Рейтинг</p>
                <input @bind-value="playerModel.ELORating" type="number" step="0.1" disabled="@update"/>
            </div>
            <div>
                <p class="error-text">@result[6]</p>
                <p class="error-text">Страна</p>
                <input @bind-value="playerModel.Contry" disabled="@update"/>
            </div>
            <div>
                <p class="error-text">@result[7]</p>
                <p class="error-text">Пароль</p>
                <input @bind-value="playerModel.Passord" disabled="@update"/>
            </div>
        </section>
    </div>
    @if (!update)
    {
        <button class="top-row-text text" @onclick="OnUpdateButton">Сохранить</button>
    }
    <section class="pozition-conteneer">
        @foreach (var item in ds)
        {
            <div class="element">
                <h3>class="text">@item.Name</h3>
                <h4> class="text">@item.TopPlece</h4>
            </div>
        }
    </section>
</body>

@code {
    Data.Model.Player playerModel = StaticResouses.mainControler.PlayerControler.nowPlayer;
    int Fide = (int)StaticResouses.mainControler.PlayerControler.nowPlayer.FIDEID;
    bool update = true;
    string[] result = new string[8];
    List<TourPozition> ds = new();

    private void OnUpdate() => update = !update;
    private void OnClickNavigation(string str) => NavigationManager.NavigateTo(str);

    private async void OnUpdateButton()
    {
        Array.Clear(result);

        result = await Helper.CheckPlayerUpAsync(playerModel, Fide);

        if (!Helper.CheckStringArray(result)) return;
        if (!await StaticResouses.mainControler.PlayerControler.Update(playerModel, Fide)) return;

        update = false;
        StaticResouses.mainControler.PlayerControler.nowPlayer = playerModel;
        playerModel = new();
        StateHasChanged();
    }

    private async void OnDelete()
    {
        if (!await StaticResouses.mainControler.PlayerControler.Delete((int)StaticResouses.mainControler.PlayerControler.nowPlayer.FIDEID)) return;
        OnClickNavigation("/eventList");
    }

    public class TourPozition
    {
        public string Name { get; set; }
        public int TopPlece { get; set; }
    }
}